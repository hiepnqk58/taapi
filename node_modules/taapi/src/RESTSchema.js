const axios = require("axios");
const chalk = require("chalk");
const Taapi = require("./Taapi");
const Client = require("./Client");

// Errors
const { ErrorTypes } = require("./Errors");

class RESTSchema
{
    constructor(api, secret, taapiApiEndpoint) {

        this.api = api;
        this.secret = secret;
        this.taapiApiEndpoint = taapiApiEndpoint;

        // Init taapi bulk calls
        this.taapiBulk = new Client(this.secret);

        // Override the API Endpoint
        this.taapiBulk.setTaapiApiEndpoint(this.taapiApiEndpoint);
        
    }

    async configureEndpoints() { 
        
        this.api.get(`/indicator`, async (req, res) => {

            let queryValidation = await this.validateIndicatorQuery(req, res);

            if(queryValidation && queryValidation.statusCode !== 200) {

                res.status(queryValidation.statusCode).send(queryValidation.data);

                return;

            } else if(queryValidation && queryValidation.statusCode === 200) {

                let query = queryValidation.data;

                // Init taapi
                let taapi = new Taapi(this.secret);

                // Override the API Endpoint
                taapi.setTaapiApiEndpoint(this.taapiApiEndpoint);

                // Fetch the indicator result
                let result = {};
                let statusCode = 200;
                
                try {

                    let response = await taapi.getIndicator(query.indicator, query.exchange, query.symbol, query.interval, query.params, query.backtrack, query.candlesCount);

                    statusCode = response.statusCode;
                    result = response.data;
                    
                } catch (Exception) {

                    //console.error(Exception.response);
                    //console.error(Exception.status);

                    result = { 
                        error: {
                            message: Exception.message,
                            exception: Exception.stack,
                        }
                    };

                    statusCode = 500;
                }

                res.status(statusCode).send(result);

                return;

            } else {

                res.status(500).send({
                    error: "An unknow error has occurred. Please check your query and documentation: https://taapi.io/documentation/integration/client/"
                });

                return;

            }
        });

        /* *************************************** BULK QUERIES **************************************** */

        this.api.get(`/init-bulk-queries`, async (req, res) => {

            this.taapiBulk.initBulkQueries();

            res.status(200).send({ message: "Bulk queries initilaized!" });

        });

        this.api.get(`/execute-bulk-queries`, async (req, res) => {

            let bulkQueryResult = await this.taapiBulk.executeBulkQueries();
            
            res.status(200).send(bulkQueryResult);

        });

        this.api.get(`/add-bulk-query`, async (req, res) => {

            let queryValidation = await this.validateIndicatorQuery(req, res);

            if(queryValidation && queryValidation.statusCode !== 200) {

                res.status(queryValidation.statusCode).send(queryValidation.data);

                return;

            } else if(queryValidation && queryValidation.statusCode === 200) {

                let query = queryValidation.data;
                
                try {

                    await this.taapiBulk.addBulkQuery(query.indicator, query.exchange, query.symbol, query.interval, query.params, query.backtrack, query.id, query.candlesCount);

                    res.status(200).send({ message: "Bulk query added!" });
    
                    return;
                    
                } catch (Exception) {

                    res.status(500).send({ 
                        error: {
                            message: Exception.message,
                            exception: Exception.stack,
                        }
                    });
    
                    return;

                }                

            } else {

                res.status(500).send({
                    error: "An unknow error has occurred. Please check your query and documentation: https://taapi.io/documentation/integration/client/"
                });

                return;

            }
        });

        this.api.get(`/*`, async (req, res) => {

            res.status(ErrorTypes.NOT_FOUND.statusCode).send({
                errors: [ErrorTypes.NOT_FOUND.message]
            });

        });

        this.api.post(`/*`, async (req, res) => {

            res.status(ErrorTypes.NOT_FOUND.statusCode).send({
                errors: [ErrorTypes.NOT_FOUND.message]
            });

        });
    }

    async validateIndicatorQuery(req, res) {

        let response = {
            statusCode: 200,
            data: {}
        }

        const args = req.query;

        let hasErrors = false;
        let errors = [];

        let requiredParameters = ["exchange", "indicator", "symbol", "interval"];

        for(let requiredParameterKey in requiredParameters) {

            const requiredParameter = requiredParameters[requiredParameterKey];
            if(!args[requiredParameter] || args[requiredParameter] === "") {
                hasErrors = true;
                errors.push(`'${requiredParameter}' is a required parameter!`);
            }
        }            

        if(hasErrors) {

            response.statusCode = 400;
            response.data.errors = errors;

            return response;
        }

        // Fetch the mandator parameters
        const exchange = args.exchange;
        delete args.exchange;

        const indicator = args.indicator;
        delete args.indicator;

        const symbol = args.symbol;
        delete args.symbol;

        const interval = args.interval;
        delete args.interval;

        // Fetch backtrack
        let backtrack = args.backtrack || 0;
        delete args.backtrack;

        // Fetch candles count
        let candlesCount = args.candlesCount || 100;
        delete args.candlesCount;

        // Default an id (used for bulk) to null
        let id = args.id || null;
        delete args.id;

        // Any remaining args are passed on as optional params
        let params = args;

        response.data = {
            indicator: indicator,
            exchange: exchange,
            symbol: symbol,
            interval: interval,
            params: params,
            backtrack: backtrack,
            candlesCount: candlesCount,
            id: id,
        };

        return response;
    }
}

module.exports = RESTSchema;