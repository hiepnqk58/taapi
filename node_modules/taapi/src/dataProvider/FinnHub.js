const ccxt = require("ccxt");
const axios = require("axios");

class ExchangeDataFinnHub
{
    constructor(secret) {
        this.secret = secret;
    }

    getStockApiEndpoint(source, symbol, interval, candlesCount) {

        if(candlesCount == -1) {
            candlesCount = 10000;
        } else if(candlesCount > 1) {
            candlesCount = (candlesCount + 1) * 2;
        }

        let uri = null;
        let timeframe = null;
        
        switch(interval) {
            case "1m": timeframe = "1"; break;
            case "5m": timeframe = "5"; break;
            case "15m": timeframe = "15"; break;
            case "30m": timeframe = "30"; break;
            case "1h": timeframe = "60"; break;
            case "1d": timeframe = "D"; break;
            case "1w": timeframe = "W"; break;
            case "1M": timeframe = "M"; break;
            default:
                console.error("Error: FinnHub - Invalid interval: 1m, 5m, 15m, 60m, 1h, 1d, 1w, 1M timeframes allowed!");
        }

        if(timeframe) {
            switch(source) {
                case "equity":
                    uri = `https://finnhub.io/api/v1/stock/candle?token=${this.secret}&symbol=${symbol}&resolution=${timeframe}&count=${candlesCount}`;
                    break;
                case "forex":
                    uri = `https://finnhub.io/api/v1/forex/candle?token=${this.secret}&symbol=${symbol}&resolution=${timeframe}&count=${candlesCount}`;
                    break;
                default: 
                console.error("Error: FinnHub - Invalid source: 'equity' and 'forex' allowed!");
            }
        }
        
        return uri;
    }

    async getCandles(source, symbol, interval, candlesCount) {

        let endpointUri = this.getStockApiEndpoint(source, symbol, interval, candlesCount);
        
        let candles = [];

        if(endpointUri) {

            await axios.get(endpointUri, { })
                .then(function (response) {

                    const opens = response.data.o;
                    const closes = response.data.c;
                    const highs = response.data.h;
                    const lows = response.data.l;
                    const volumes = response.data.v;
                    const timestamps = response.data.t;

                    if(opens && closes && highs && lows && volumes && timestamps) {

                        for(let i = 0; i < opens.length; i++) {

                            let timestamp = timestamps[i];
                            //let momentTimestamp = moment(timestamp * 1000);

                            candles.push({
                                /* type: type,
                                symbol: symbol,
                                interval: interval, */
                                timestamp: timestamp * 1000,
                                //timestampHuman: momentTimestamp.format("DD-MM-YYYY HH:mm:ss"),
                                open: parseFloat(opens[i]),
                                close: parseFloat(closes[i]),
                                high: parseFloat(highs[i]),
                                low: parseFloat(lows[i]),
                                volume: parseFloat(volumes[i]),
                            });
                        }
                    }
                })
                .catch(function (error) {
                    console.log(error);
                });

        }

        if(candlesCount && candlesCount > 0) {
            candles = candles.slice(candlesCount * -1);
        }
        
        return candles;
    }
}

module.exports = ExchangeDataFinnHub;